from core.emulator.coreemu import CoreEmu
from core.emulator.emudata import IpPrefixes
from core.emulator.enumerations import EventTypes
from core.emulator.enumerations import NodeTypes
from core.nodes.network import WlanNode
from core.location.mobility import Ns2ScriptedMobility
from core.nodes.base import CoreNode
from core.emulator.emudata import NodeOptions

from random import randint

import core

def main():
    node_number = 7
    sample_file = "/home/apocas/MEGA/Engenharia_Informatica/Master/AER/Projeto/test/sample.scen"
    # ip generator for example
    prefixes = IpPrefixes(ip6_prefix="2001:0::0/64")
  
    mov_list = []
    for node_i in range(1,node_number+2): 
        time = 2
        for i in range(0,100):
            mov_list.append((time,"$ns_ at " + str(time) + " \"$node(" + str(node_i) + ") setdest " + str(randint(0,700)) + " " + str(randint(0,700)) + " " + str(randint(30,100)) + "\"\n"))
            time += randint(1,5)

    fil = open(sample_file,"w")
    for (a,b) in mov_list:
        fil.write(b)
    fil.close()

    # create emulator instance for creating sessions and utility methods
    coreemu = globals().get("coreemu", CoreEmu())
    session = coreemu.create_session()

    session.set_state(EventTypes.CONFIGURATION_STATE)
    wlan = session.add_node(NodeTypes.WIRELESS_LAN)
    wlan.mobility = Ns2ScriptedMobility(session,wlan.id)
    wlan.mobility.update_config({"file": sample_file,"refresh_ms":"50","loop": "on","autostart":"1","map":"","script_start": "","script_pause":"","script_stop":""})

    wlan.setposition(x=50,y=50)

    
    for i in range(0,node_number):
        options = NodeOptions()
        options.services = ["zebra","IPForward","OSPFv3MDR"]
        mdr = session.add_node(options=options)
        session.services.set_service_file(mdr.id, "zebra", "/usr/local/etc/quagga/Quagga.conf","interface eth0\n" + "  ip address 10.0.0.3/32\n" +"  ipv6 address 2001::3/128\n" +"  ipv6 ospf6 instance-id 65\n" +"  ipv6 ospf6 hello-interval 2\n" +"  ipv6 ospf6 dead-interval 6\n" +"  ipv6 ospf6 retransmit-interval 5\n" +"  ipv6 ospf6 network manet-designated-router\n" +"  ipv6 ospf6 diffhellos\n" +"  ipv6 ospf6 adjacencyconnectivity uniconnected\n" +"  ipv6 ospf6 lsafullness mincostlsa\n" +"!\n" +"router ospf6\n" +"  router-id 10.0.0.3\n" +"  instance-id 30\n" +"  interface eth0 area 0.0.0.0\n" +"!\n")
        session.services.set_service_file(mdr.id, "IPForward", "ipforward.sh", "#!/bin/sh\n" + "# auto-generated by IPForward service (utility.py)\n" + "/sbin/sysctl -w net.ipv4.conf.all.forwarding=1\n" + "/sbin/sysctl -w net.ipv4.conf.default.forwarding=1\n" + "/sbin/sysctl -w net.ipv6.conf.all.forwarding=1\n" + "/sbin/sysctl -w net.ipv6.conf.default.forwarding=1\n" + "/sbin/sysctl -w net.ipv4.conf.all.send_redirects=0\n" + "/sbin/sysctl -w net.ipv4.conf.default.send_redirects=0\n" + "/sbin/sysctl -w net.ipv4.conf.all.rp_filter=0\n" + "/sbin/sysctl -w net.ipv4.conf.default.rp_filter=0\n" + "/sbin/sysctl -w net.ipv4.conf.eth0.forwarding=1\n" + "/sbin/sysctl -w net.ipv4.conf.eth0.send_redirects=0\n" + "/sbin/sysctl -w net.ipv4.conf.eth0.rp_filter=0\n")
        
        interface = prefixes.create_interface(mdr)
        mdr.setposition(x=randint(1,700),y=randint(1,700))
        session.add_link(mdr.id,wlan.id,interface_one=interface)

    
    
    session.instantiate()

    


    
    
    # must be in configuration state for nodes to start, when using "node_add" below
   

if __name__ in ["__main__", "__builtin__"]:
    main()

# shutdown session
